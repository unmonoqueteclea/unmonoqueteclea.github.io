<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[@unmonoqueteclea]]></title>
<description><![CDATA[@unmonoqueteclea]]></description>
<link>https://unmonoqueteclea.github.io</link>
<lastBuildDate>Thu, 21 Mar 2024 14:30:27 +0100</lastBuildDate>
<item>
  <title><![CDATA[the technology behind Voilib]]></title>
  <description><![CDATA[
<p>
Each week, <a href="https://voilib.com">Voilib</a> diligently <b>collects and transcribes</b> hundreds of
podcast episodes. These valuable transcripts undergo a meticulous
indexing process, enabling a sophisticated <b>semantic search</b>
capability. As a result, our users can effortlessly execute
intelligent queries, pinpointing precisely the most relevant fragments
of podcast episodes.
</p>

<p>
I launched <b>Voilib</b> in December 2022 and, some months later, I decided
to embrace openness by making Voilib <a href="https://unmonoqueteclea.github.io/2023-07-02-voilib-is-now-open-source.html">Open Source</a>. This alowed everyone
to create their own instances, transcribe, and index their cherished
podcasts. You'll find it easily accessible on both <a href="https://github.com/unmonoqueteclea/voilib">Github</a> and
<a href="https://gitlab.com/unmonoqueteclea/voilib">Gitlab</a>. As promised, let me take you on a fascinating journey into the
captivating technology behind it.
</p>



<figure id="org23932f3">
<img src="https://unmonoqueteclea.github.io/static/voilib.gif" alt="voilib.gif" width="100%">

<figcaption><span class="figure-number">Figure 1: </span>Searching content in voilib.com</figcaption>
</figure>


<p>
Essentially, <a href="https://voilib.com">Voilib</a>'s work can be divided into four main tasks:
<b>collecting</b> new episodes, <b>transcribing</b> them, <b>indexing</b> all the content,
and <b>querying</b> the vector database to find relevant fragments.
</p>
<div id="outline-container-orgb000896" class="outline-2">
<h2 id="orgb000896">üåê  collect (new episodes)</h2>
<div class="outline-text-2" id="text-orgb000896">
<p>
Almost all public podcasts have an associated <code>RSS feed</code> that contains
metadata about every episode, including a link to the audio file. As
an example, <a href="http://feeds.feedburner.com/TEDTalks_audio">this</a> is the feed from the <a href="https://www.ted.com/about/programs-initiatives/ted-talks/ted-talks-daily">Ted Talks Daily</a> podcast.
</p>

<p>
<b>Voilib</b> collects and stores <b>metadata</b> from the list of podcasts feeds
manually configured by the application admin. For each episode, it
stores in a <code>SQLite</code> database things such as the title, the description,
the language or the duration.
</p>

<p>
When I want to check if new episodes were published, I just need to
run this in a command line (although I have a <b>cron job</b> configured to
run it twice a day):
</p>

<div class="org-src-container">
<pre class="src src-bash">voilib-episodes --update
</pre>
</div>

<p>
If you want to dig into the code, check <a href="https://github.com/unmonoqueteclea/voilib/blob/main/backend/src/voilib/collection/feed.py">feed.py</a> and <a href="https://github.com/unmonoqueteclea/voilib/blob/main/backend/src/voilib/collection/crawler.py">crawler.py</a>
modules.
</p>
</div>
</div>
<div id="outline-container-org6242e54" class="outline-2">
<h2 id="org6242e54">üó®Ô∏è transcript (episodes audios)</h2>
<div class="outline-text-2" id="text-org6242e54">
<p>
The podcast episodes are transcribed using <a href="https://openai.com/research/whisper">Whisper, an Open Source
Speech Recognition Model developed by OpenAI</a>. <b>Voilib</b> effectively
leverages <code>Whisper</code>, utilizing the <a href="https://github.com/sanchit-gandhi/whisper-jax">whisper-jax</a> library. This
particular implementation of <code>Whisper</code> boasts exceptional efficiency,
showcasing speeds up to 70 times faster than comparable alternatives.
</p>

<p>
However, most <a href="https://github.com/sanchit-gandhi/whisper-jax">whisper-jax</a> optimizations are predominantly GPU-focused
(that <b>Voilib</b> is not using yet), I must admit that I have not observed
significant improvements in CPU performance when compared to the
<a href="https://github.com/openai/whisper">official implementation</a>. Nevertheless, the accuracy of this model is
nothing short of remarkable, even for the small version with "just"
39M parameters. It is truly astonishing to think that a few years ago,
having an Open Source Speech Recognition model as swift and accurate
as this one would have been deemed nearly implausible.
</p>

<p>
When I want to transcribe the new episodes from the last 3 days, I
just need to run this (I also have a <b>cron job</b> configured to run it):
</p>

<div class="org-src-container">
<pre class="src src-bash">voilib-episodes --transcribe-days 3
</pre>
</div>

<p>
For curious minds, you can check <a href="https://github.com/unmonoqueteclea/voilib/blob/main/backend/src/voilib/transcription.py">transcription.py</a> module.
</p>
</div>
</div>
<div id="outline-container-orgd17281d" class="outline-2">
<h2 id="orgd17281d">üìá index (episodes trancriptions)</h2>
<div class="outline-text-2" id="text-orgd17281d">
<p>
The process of generating episode transcripts involves breaking them
down into fragments, each comprising approximately 40 words. <b>Voilib</b>
employs the <a href="https://www.sbert.net/">sentence-transformers</a> <code>Python</code> library to calculate the
<b>embedding of each 40-words fragment</b>, effectively transforming it into
a <b>384-dimensional vector of floating point numbers</b>.
</p>

<p>
To shed light on the concept of <b>embeddings</b>, they can be defined as
lower-dimensional spaces that allow for the translation of
high-dimensional vectors.  The goal of embeddings is to capture
semantic similarity, ensuring that inputs with similar meanings are
placed closer together in the embedding space.
</p>

<p>
The <a href="https://www.sbert.net/">sentence-transformers</a> library stands out as the optimal choice for
creating text embeddings. This is the description from their <a href="https://www.sbert.net/">website</a>:
</p>

<blockquote>
<p>
You can use this framework to compute sentence / text embeddings for
more than 100 languages. These embeddings can then be compared
e.g. with cosine-similarity to find sentences with a similar
meaning. This can be useful for semantic textual similar, semantic
search, or paraphrase mining.
</p>

<p>
The framework is based on PyTorch and Transformers and offers a large
collection of pre-trained models tuned for various tasks. Further, it
is easy to fine-tune your own models.
</p>
</blockquote>

<p>
The model <b>Voilib</b> is using to calculate the embeddings is
<code>multi-qa-MiniLM-L6-cos-v1</code>. This model have been specifically trained
for Semantic Search with <a href="https://huggingface.co/sentence-transformers/multi-qa-MiniLM-L6-dot-v1#training">215M question-answer pairs</a> from various
sources and domains.
</p>

<p>
You can find the code for Voilib's embedding calculation in the
<a href="https://github.com/unmonoqueteclea/voilib/blob/main/backend/src/voilib/embedding.py">embedding.py</a> module.
</p>

<p>
Those calculated vectors are then stored in a <b>vector database</b>, one of
the main components of the system. More on this in the next section.
</p>
</div>
</div>
<div id="outline-container-org2eeaecc" class="outline-2">
<h2 id="org2eeaecc">üîç query (embeddings)</h2>
<div class="outline-text-2" id="text-org2eeaecc">
<p>
Each episode's embeddings are meticulously preserved within a <b>vector
database</b>. In recent months, we have witnessed a surge in new
technologies specifically designed for storing embeddings. These
innovative solutions empower us to efficiently store embeddings and
seamlessly query them using cutting-edge <b>Approximate Nearest Neighbor
search</b> algorithms.
</p>

<p>
During the initial stages, <b>Voilib</b> relied on <a href="https://github.com/facebookresearch/faiss">Meta's FAISS</a> library for
embedding storage. However, to enhance the system and include
additional metadata for each embedding (that can be also used to
filter queries), I decided to migrate to <a href="https://qdrant.tech/">qdrant</a>, a higher-level
solution. With <a href="https://qdrant.tech/">qdrant</a>, we achieve the ability to incorporate
supplementary metadata while seamlessly managing embeddings. As part
of this evolution, <b>Voilib</b> now operates its own instance of the <a href="https://hub.docker.com/r/qdrant/qdrant/">qdrant
server</a>, further ensuring data autonomy and control.
</p>

<p>
For every <b>user prompt</b>, Voilib performs a swift calculation of the
corresponding embedding and efficiently queries the vector
database. This process enables the system to swiftly identify and
return the most relevant results, ensuring a seamless and satisfying
user experience.
</p>

<p>
Of course, there is another command to calculate and store embeddings
from all pending episodes:
</p>

<div class="org-src-container">
<pre class="src src-bash">voilib-episodes --store
</pre>
</div>

<p>
More, in the <a href="https://github.com/unmonoqueteclea/voilib/blob/main/backend/src/voilib/vector.py">vector.py</a> module.
</p>
</div>
</div>
<div id="outline-container-orgf6f4f71" class="outline-2">
<h2 id="orgf6f4f71">happy to receive your feedback</h2>
<div class="outline-text-2" id="text-orgf6f4f71">
<p>
Please feel free to reach out to me at <code>unmonoqueteclea@gmail.com</code> with
your thoughts, suggestions, or any inquiries.
</p>

<p>
I am eager to know which podcasts you would like to see available on
<a href="https://voilib.com/">Voilib</a>. Additionally, if there are any specific features that you
believe would enhance your user experience and make your life easier,
please do not hesitate to share them with me. It's a fantastic
opportunity to contribute to the open-source community.
</p>

<p>
If you have been considering hosting your own instance, I would be
thrilled to support and guide you through the process.
</p>

<p>
I look forward to hearing from you!
</p>
</div>
</div>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-projects.html">projects</a> </div>]]></description>
  <category><![CDATA[projects]]></category>
  <link>https://unmonoqueteclea.github.io/2023-08-03-the-technology-behind-voilib.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-08-03-the-technology-behind-voilib.html</guid>
  <pubDate>Thu, 03 Aug 2023 20:26:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Large Language Models (LLMs) as noise generators]]></title>
  <description><![CDATA[
<div id="outline-container-orga9df0bc" class="outline-2">
<h2 id="orga9df0bc">introducing Jane: from bullet points to cover letter</h2>
<div class="outline-text-2" id="text-orga9df0bc">
<p>
Allow me to introduce you to <b>Jane Doe</b>, a seasoned <b>Software Engineer</b>
with 10 years of experience. Currently, Jane is exploring various job
opportunities and has come across a few enticing offers that demand a
cover letter as part of the application process.
</p>

<p>
In light of this circumstance, Jane has turned to <a href="https://chat.openai.com/">ChatGPT</a>, <b>seeking
assistance in crafting a compelling cover letter</b> tailored specifically
for a <b>healthcare startup</b>. The following <b>prompt</b> outlines the necessary
details for the task at hand.
</p>

<blockquote>
<p>
Imagine you are a Software Engineer with 10 years of experience that wants to apply for a Full-Stack Engineer position in a healthcare startup. Write a short cover letter with the following information:
</p>

<ul class="org-ul">
<li>I have more than 10 years of experience as a Software Engineer in multiple companies.</li>
<li>In one company, I led the migration from AWS to on-premises reducing infrastructure costs $400,000 a year.</li>
<li>I have experience working with sensitive healthcare data. I led a team of 50 Software Engineers that built a Hospital Management System currently being used in 10+ hospitals in the US.</li>
<li>I wrote a meditation app for iOS and Android with +5000 monthly  active users.</li>
</ul>
</blockquote>

<p>
You can find <a href="https://chat.openai.com/share/ee97f127-2a30-4613-8de2-8485cbb66135">here ChatGPT's response</a> (or just click <code>Details</code>
below). <a href="https://chat.openai.com/">ChatGPT</a>, as it usually does, produces an awesome 300+ words
cover letter including all the points asked by Jane.
</p>

<details id="org5532f0c">
<blockquote>
<p>
Dear [Recipient's Name],
</p>

<p>
I am writing to express my strong interest in the Full-Stack Engineer position at [Company Name]. As a highly skilled and motivated Software Engineer with over 10 years of industry experience, I am excited about the opportunity to contribute my expertise to a healthcare startup committed to making a positive impact on people's lives.
</p>

<p>
Over the course of my career, I have worked in diverse roles and companies, honing my technical skills and leadership capabilities. In one particular role, I spearheaded a critical project where I led the successful migration from AWS to an on-premises infrastructure, resulting in an impressive annual cost reduction of $400,000. This experience demonstrated my ability to strategize, plan, and execute complex technical initiatives while optimizing resources efficiently.
</p>

<p>
Additionally, I have had the privilege of working extensively with sensitive healthcare data, and I understand the importance of maintaining strict security and privacy standards. Leading a team of 50 Software Engineers in the development of a Hospital Management System deployed across 10+ hospitals in the US, I gained invaluable insights into the unique challenges and regulations surrounding healthcare technology. This project further solidified my commitment to building robust and reliable software solutions that enhance patient care and streamline healthcare operations.
</p>

<p>
Beyond my professional achievements, I have also successfully developed and launched a meditation app for both iOS and Android platforms. The app has garnered over 5000 monthly active users, showcasing my proficiency in delivering user-centric and engaging mobile applications.
</p>

<p>
Joining [Company Name] would be a tremendous opportunity for me to leverage my technical expertise, leadership experience, and passion for healthcare technology to contribute meaningfully to the company's mission. I am eager to collaborate with a dynamic team of like-minded individuals in driving innovation and positively impacting the healthcare industry.
</p>

<p>
Thank you for considering my application. I look forward to the possibility of discussing how my skills and experiences align with [Company Name]'s vision in greater detail.
</p>

<p>
Sincerely,
</p>
</blockquote>
</details>
</div>
</div>
<div id="outline-container-org3681e10" class="outline-2">
<h2 id="org3681e10">introducing Joe: from cover letter to bullet points</h2>
<div class="outline-text-2" id="text-org3681e10">
<p>
Introducing now <b>Joe Shmoe</b>, the <b>HR leader</b> responsible for reviewing
Jane's captivating cover letter. In the fast-paced world of talent
acquisition, Joe faces the daunting task of sifting through an
impressive volume of cover letters daily. His goal is to identify the
standout applicants worthy of an interview. To accomplish this
challenging feat efficiently, Joe relies on the cutting-edge
capabilities of <b>ChatGPT to extract the key insights and main ideas</b>
from each cover letter:
</p>

<blockquote>
<p>
Could you please extract the 3 o 4 main pieces of information from this cover letter as bullet points?
</p>
</blockquote>

<p>
And this is the answer he obtains from ChatGPT (find it <a href="https://chat.openai.com/share/9c6a80fc-1974-4cbf-a61a-6d0119377c76">here)</a>:
</p>

<blockquote>
<ul class="org-ul">
<li>Highly skilled and motivated Software Engineer with over 10 years of industry experience</li>
<li>Led a successful migration project from AWS to on-premises infrastructure, resulting in an annual cost reduction of $400,000</li>
<li>Extensive experience in working with sensitive healthcare data and leading a team of 50 Software Engineers in the development of a Hospital Management System for 10+ hospitals in the US</li>
<li>Successfully developed and launched a meditation app for iOS and Android platforms with over 5000 monthly active users.</li>
</ul>
</blockquote>

<p>
Does it sounds familiar to you too?
</p>
</div>
</div>
<div id="outline-container-org705007b" class="outline-2">
<h2 id="org705007b">is this the future?</h2>
<div class="outline-text-2" id="text-org705007b">
<p>
LLMs are beginning to change the process of <b>content generation</b> but
also <b>content consumption</b>, giving rise to some rather paradoxical
scenarios like the one I described.
</p>

<ul class="org-ul">
<li>When it comes to <b>content generation</b>, humans contribute valuable
information (<code>signal</code>), while LLMs (usually) decorate it with some
irrelevant elements, effectively adding <code>noise</code>.</li>

<li>During <b>content consumption</b>, humans trust LLMs to effectively
distinguish and eliminate <code>noise</code> from the essential information.</li>
</ul>

<p>
A fascinating <b>feedback loop</b> appears in this new paradigm, wherein
efforts are made to enhance the intelligence of LLMs by using text
sourced from the Internet, which in some cases might have been
generated by other LLMs (making the signal to noise ratio lower on
each iteration).
</p>

<p>
I'm intrigued by the future of Language Models and the potential
revolutionary applications they might enable but I wonder whether
we'll see a resurgence of encyclopedias as the primary source of
reliable information with a <b>high signal to noise ratio</b>.
</p>
</div>
</div>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-ml.html">ml</a> </div>]]></description>
  <category><![CDATA[ml]]></category>
  <link>https://unmonoqueteclea.github.io/2023-07-30-large-language-models-(llms)-as-noise-generators.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-07-30-large-language-models-(llms)-as-noise-generators.html</guid>
  <pubDate>Sun, 30 Jul 2023 17:48:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[voilib is now open source]]></title>
  <description><![CDATA[
<p>
Today, I decided to <b>open-source</b> <a href="https://voilib.com">Voilib</a> üéâ, the podcast search engine I
launched in December 2022. You can now <b>run your own instance</b> of it and
transcribe and index your favorite podcasts (or even your own
content!).You can find it on <a href="https://github.com/unmonoqueteclea/voilib">Github</a> or <a href="https://gitlab.com/unmonoqueteclea/voilib">Gitlab</a>.
</p>

<p>
Appearing in <a href="https://news.ycombinator.com/item?id=34115618">Show
HN</a> was a big boost for the project. That post was the main source of
traffic during the first days of life of <a href="https://voilib.com">Voilib</a>. I am thrilled to see
that many of those initial users still use it today to discover
relevant podcast episodes on topics they are interested in. Throughout
these months, I have received valuable feedback and kind words from
some of them.
</p>


<figure id="org94f3aaa">
<img src="https://unmonoqueteclea.github.io/static/feedback-voilib.png" alt="feedback-voilib.png" width="100%">

<figcaption><span class="figure-number">Figure 1: </span>Feedback from a Voilib user</figcaption>
</figure>

<p>
Since I am not offering <code>Voilib PRO</code> any more (I may talk about this in
the future) the only funding for this project, to at least cover
server expenses, will come from <a href="https://ko-fi.com/unmonoqueteclea">donations</a> and <a href="https://ko-fi.com/unmonoqueteclea/commissions">customized assistance</a> to
people maintaining their own instances.
</p>

<p>
In the following weeks (well&#x2026; maybe months), I will publish some
blog posts explaining how the system works. I consider this is the
kind of content I would have loved to find some months ago when many
people suddenly became <code>prompt engineers</code>, but not so many people really
understood how to build actual LLM-based products beyond the chat
interface.
</p>

<p>
<b>UPDATE</b> <span class="timestamp-wrapper"><span class="timestamp">[2023-08-04 Fri] </span></span> Read <a href="https://unmonoqueteclea.github.io/2023-08-03-the-technology-behind-voilib.html">here</a> about the technology behind <b>Voilib</b>.
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-projects.html">projects</a> </div>]]></description>
  <category><![CDATA[projects]]></category>
  <link>https://unmonoqueteclea.github.io/2023-07-02-voilib-is-now-open-source.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-07-02-voilib-is-now-open-source.html</guid>
  <pubDate>Sun, 02 Jul 2023 12:32:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[learning about Docker Contexts]]></title>
  <description><![CDATA[
<p>
A single <b>Docker CLI</b> to rule them all!  Let me show you a little
example of how I manage different Docker nodes.
</p>

<p>
My audio search engine, <a href="https://voilib.com">voilib.com</a>, is running on a remote machine,
configured in my <code>.ssh/config</code> file with the name <b>voilib</b>. I used to do
<code>ssh voilib</code> to open a new <b>SSH session</b> to execute commands such as
<code>docker stats</code> or <code>docker logs</code>. But then I discovered <a href="https://docs.docker.com/engine/context/working-with-contexts/">Docker Contexts</a>.
</p>

<p>
I created a new context just by doing:
</p>

<p>
<code>docker context create voilib --docker "host=ssh://voilib"</code>
</p>

<p>
Now, every time I need to run any Docker command in the <b>voilib</b> machine
I just do:
</p>

<p>
<code>docker context use voilib</code>.
</p>

<p>
From that moment, all the Docker commands such as <code>docker exec</code>, <code>docker
logs</code> or <code>docker stats</code> will be running inside the remote server!  When I
want to return to my local environment I do:
</p>

<p>
<code>docker context use default</code>
</p>


<p>
I even opened a new <a href="https://github.com/Silex/docker.el/pull/213">PR</a> in <a href="https://github.com/Silex/docker.el">docker.el</a> so that I can check available
contexts and change the active one from <code>Emacs</code>. How I wish I had
discovered it before!
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-docker.html">Docker</a> </div>]]></description>
  <category><![CDATA[Docker]]></category>
  <link>https://unmonoqueteclea.github.io/2023-02-18-learning-about-docker-contexts.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-02-18-learning-about-docker-contexts.html</guid>
  <pubDate>Sat, 18 Feb 2023 21:54:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[emacs: triggering rsync from dired]]></title>
  <description><![CDATA[
<p>
If you are a heavy <code>Emacs</code> user as me, you will have tried to move files
between different machines using <code>TRAMP</code>. But this approach is not nice
for large files. <code>TRAMP</code> is very slow for large files and it will block
<code>Emacs</code> during the file transfer.
</p>

<p>
Although <a href="https://github.com/stsquad/dired-rsync">dired-rsync</a> could help with that, I decided to write my own
solution, as this is a great usecase for the <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>
package I am testing these days.
</p>

<p>
And it turned out that the solution was as easy as this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #5317ac;">defun</span> <span style="color: #721045;">mono/dwim-rsync</span> (output)
  <span style="color: #2a486a;">"Use rsync to move selected files to OUTPUT."</span>
  (<span style="color: #5317ac;">interactive</span> <span style="color: #2544bb;">"D"</span>)
  (dwim-shell-command-on-marked-files
   (format <span style="color: #2544bb;">"Moving selected files to %s"</span> output)
   <span style="color: #505050;">;; </span><span style="color: #505050;">we need to convert TRAMP ssh syntax (e.g. /ssh:myserver:/home)</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">to rsync syntax (e.g. myserver:/home). For the output file</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">it's easy, but for input files we need to do it in the command,</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">that is where '</span><span style="color: #0000c0;">&lt;&lt;*&gt;&gt;</span><span style="color: #505050;">' is expanded.</span>
   (<span style="color: #5317ac;">let</span> ((clean-output (replace-regexp-in-string <span style="color: #2544bb;">"</span><span style="color: #813e00;">\</span><span style="color: #2544bb;">/ssh:"</span> <span style="color: #2544bb;">""</span> output))
         (clean-files-cmd <span style="color: #2544bb;">"echo &lt;&lt;*&gt;&gt; | sed '</span><span style="color: #0000c0;">s/\\/ssh://g</span><span style="color: #2544bb;">'"</span>))
     (format <span style="color: #2544bb;">"%s | xargs -i rsync -aP {} %s"</span> clean-files-cmd clean-output))
   <span style="color: #8f0075;">:utils</span> <span style="color: #2544bb;">"rsync"</span>))
</pre>
</div>

<p>
It could have been a one-liner but I had to add some additional logic
to transform <code>TRAMP</code> paths into valid <code>rsync</code> ones.
</p>

<p>
Now, I just need to select some files in <code>dired</code> and run
<code>mono/dwim-rsync</code>. This will let me specify in the minibuffer any path I
want (local or remote, using <code>ssh</code>), and <code>rsync</code> will be used to copy the
files. Bye, <code>filezilla</code>!
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</guid>
  <pubDate>Sun, 29 Jan 2023 19:27:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[my public dotfiles]]></title>
  <description><![CDATA[
<p>
<b>tldr</b> My dotfiles are now public <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a> üéâ
</p>

<p>
Publishing one's <b>dotfiles</b> can feel like posting naked pictures. It may
show things that people wouldn't like to see. But I was finally brave
to do it (publishing dotfiles). I think it's fair to publish them, as
I have read many public dotfile repositories before writing mine. You
can find my dotfiles <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a>.
</p>
<div id="outline-container-orgc2b231d" class="outline-2">
<h2 id="orgc2b231d">GNU stow</h2>
<div class="outline-text-2" id="text-orgc2b231d">
<p>
To keep a repository with all the dotfiles I am using <code>GNU Stow</code>. On its
<a href="https://www.gnu.org/software/stow/">website</a>, <code>GNU Stow</code> is defined as a <b>symlink farm manager</b>. It helps me to
manage automatically symlinks between <code>$HOME</code> (or any other place that
can contain dotfiles) and my dotfiles repository. I included a
<a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/makefile">makefile</a> in the repository to automatically create all the needed
links using this tool.
</p>
</div>
</div>
<div id="outline-container-org03b130b" class="outline-2">
<h2 id="org03b130b">emacs config</h2>
<div class="outline-text-2" id="text-org03b130b">
<p>
The biggest part of my dotfiles repository is my <code>Emacs</code> configuration
in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/emacs/.emacs.d">emacs/.emacs.d</a>. I have a modularized <code>Emacs</code> configuration, keeping
<code>.el</code> files for things like agenda, theming, keybindings, etc. I try to
add explanations for everything I add there, so I hope they can be
useful to you.
</p>
</div>
</div>
<div id="outline-container-org41c1741" class="outline-2">
<h2 id="org41c1741">secrets</h2>
<div class="outline-text-2" id="text-org41c1741">
<p>
There are always private things in your dotfiles that you don't want
to show.
</p>

<p>
For instance, in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/ssh/.ssh">ssh configuration</a>, there are some entries that I want
to keep secret. The solution was easy, I just need to add a new
<code>config.secret</code> file with those entries. That file will be included in
my <code>.gitignore</code> file and, to ensure I can access those entries, I added
the following to my main <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/ssh/.ssh/config">config file</a>:
</p>

<div class="org-src-container">
<pre class="src src-bash">Include config.secret
</pre>
</div>

<p>
All your secret entries will be automatically imported!
</p>

<p>
I also keep some <i>gitignored</i> <code>*.secrets.sh*</code> files that include <b>APIs keys</b>
and similar things.
</p>
</div>
</div>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-linux.html">linux</a> <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</link>
  <guid>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</guid>
  <pubDate>Mon, 26 Dec 2022 20:20:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[towards minimalism]]></title>
  <description><![CDATA[
<p>
<b>tldr</b> I moved the blog to an extremely simple static blog generator
with no dependencies, no <code>Javascript</code> and no magic tricks. Just plain
<code>HTML</code> and <code>CSS</code>. You can find the code <a href="https://github.com/unmonoqueteclea/unmonoqueteclea.github.io/">here</a>.
</p>

<p>
If you have been following this blog for some time you will have
noticed that I am not very good at keeping a routine of writing new
blog posts every week (or even every month). There was something that
created a lot of friction in the writing process (even more than the
white paper syndrome): every time I wanted to add new content, usually
after some months with no content, the blog build process was
broken. I spent more time fixing the blog than adding content to
it. This made me move to lightweight blogging systems like <a href="https://jekyllrb.com/">Jekyll</a>. But
it wasn't enough so I decided to embrace minimalism.
</p>

<p>
What is the very minimal list of features that I need in a blogging
framework?:
</p>

<ul class="org-ul">
<li>Convert from markup languages such as <code>markdown</code> or <code>org-mode</code> into
plain <code>html</code></li>
<li>Keep an updated <b>index</b> page</li>
<li>Automatically create a <code>rss.xml</code> file</li>
<li>Automatically create an <b>archive</b> page and, ideally, another page for
each <b>tag</b></li>
</ul>

<p>
Just that. Those are the only things that I need. And that is what
<a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> gives me. One single dependency, integrated into
<code>Emacs</code>, my OS (well&#x2026; my code editor). No <code>Javascript</code>, just pure <code>HTML</code>
and <code>CSS</code>.
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-blogging.html">blogging</a> </div>]]></description>
  <category><![CDATA[blogging]]></category>
  <link>https://unmonoqueteclea.github.io/2022-12-26-towards-minimalism.html</link>
  <guid>https://unmonoqueteclea.github.io/2022-12-26-towards-minimalism.html</guid>
  <pubDate>Mon, 26 Dec 2022 12:00:00 +0100</pubDate>
</item>
</channel>
</rss>
