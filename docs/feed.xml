<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[@unmonoqueteclea]]></title>
<description><![CDATA[@unmonoqueteclea]]></description>
<link>https://unmonoqueteclea.github.io</link>
<lastBuildDate>Thu, 20 Jul 2023 12:46:09 +0200</lastBuildDate>
<item>
  <title><![CDATA[voilib is now open source]]></title>
  <description><![CDATA[
<p>
Today, I decided to <b>open-source</b> <a href="https://voilib.com">Voilib</a> ðŸŽ‰, the podcast search engine I
launched in December 2022. You can now <b>run your own instance</b> of it and
transcribe and index your favorite podcasts (or even your own
content!).You can find it on <a href="https://github.com/unmonoqueteclea/voilib">Github</a> or <a href="https://gitlab.com/unmonoqueteclea/voilib">Gitlab</a>.
</p>

<p>
Appearing in <a href="https://news.ycombinator.com/item?id=34115618">Show
HN</a> was a big boost for the project. That post was the main source of
traffic during the first days of life of <a href="https://voilib.com">Voilib</a>. I am thrilled to see
that many of those initial users still use it today to discover
relevant podcast episodes on topics they are interested in. Throughout
these months, I have received valuable feedback and kind words from
some of them.
</p>


<figure id="org8392267">
<img src="https://unmonoqueteclea.github.io/static/feedback-voilib.png" alt="feedback-voilib.png" width="100%">

<figcaption><span class="figure-number">Figure 1: </span>Feedback from a Voilib user</figcaption>
</figure>

<p>
Since I am not offering <code>Voilib PRO</code> any more (I may talk about this in
the future) the only funding for this project, to at least cover
server expenses, will come from <a href="https://ko-fi.com/unmonoqueteclea">donations</a> and <a href="https://ko-fi.com/unmonoqueteclea/commissions">customized assistance</a> to
people maintaining their own instances.
</p>

<p>
In the following weeks (well&#x2026; maybe months), I will publish some
blog posts explaining how the system works. I consider this is the
kind of content I would have loved to find some months ago when many
people suddenly became <code>prompt engineers</code>, but not so many people really
understood how to build actual LLM-based products beyond the chat
interface.
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-projects.html">projects</a> </div>]]></description>
  <category><![CDATA[projects]]></category>
  <link>https://unmonoqueteclea.github.io/2023-07-02-voilib-is-now-open-source.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-07-02-voilib-is-now-open-source.html</guid>
  <pubDate>Sun, 02 Jul 2023 12:32:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[learning about Docker Contexts]]></title>
  <description><![CDATA[
<p>
A single <b>Docker CLI</b> to rule them all!  Let me show you a little
example of how I manage different Docker nodes.
</p>

<p>
My audio search engine, <a href="https://voilib.com">voilib.com</a>, is running on a remote machine,
configured in my <code>.ssh/config</code> file with the name <b>voilib</b>. I used to do
<code>ssh voilib</code> to open a new <b>SSH session</b> to execute commands such as
<code>docker stats</code> or <code>docker logs</code>. But then I discovered <a href="https://docs.docker.com/engine/context/working-with-contexts/">Docker Contexts</a>.
</p>

<p>
I created a new context just by doing:
</p>

<p>
<code>docker context create voilib --docker "host=ssh://voilib"</code>
</p>

<p>
Now, every time I need to run any Docker command in the <b>voilib</b> machine
I just do:
</p>

<p>
<code>docker context use voilib</code>.
</p>

<p>
From that moment, all the Docker commands such as <code>docker exec</code>, <code>docker
logs</code> or <code>docker stats</code> will be running inside the remote server!  When I
want to return to my local environment I do:
</p>

<p>
<code>docker context use default</code>
</p>


<p>
I even opened a new <a href="https://github.com/Silex/docker.el/pull/213">PR</a> in <a href="https://github.com/Silex/docker.el">docker.el</a> so that I can check available
contexts and change the active one from <code>Emacs</code>. How I wish I had
discovered it before!
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-docker.html">Docker</a> </div>]]></description>
  <category><![CDATA[Docker]]></category>
  <link>https://unmonoqueteclea.github.io/2023-02-18-learning-about-docker-contexts.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-02-18-learning-about-docker-contexts.html</guid>
  <pubDate>Sat, 18 Feb 2023 21:54:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[emacs: triggering rsync from dired]]></title>
  <description><![CDATA[
<p>
If you are a heavy <code>Emacs</code> user as me, you will have tried to move files
between different machines using <code>TRAMP</code>. But this approach is not nice
for large files. <code>TRAMP</code> is very slow for large files and it will block
<code>Emacs</code> during the file transfer.
</p>

<p>
Although <a href="https://github.com/stsquad/dired-rsync">dired-rsync</a> could help with that, I decided to write my own
solution, as this is a great usecase for the <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>
package I am testing these days.
</p>

<p>
And it turned out that the solution was as easy as this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #5317ac;">defun</span> <span style="color: #721045;">mono/dwim-rsync</span> (output)
  <span style="color: #2a486a;">"Use rsync to move selected files to OUTPUT."</span>
  (<span style="color: #5317ac;">interactive</span> <span style="color: #2544bb;">"D"</span>)
  (dwim-shell-command-on-marked-files
   (format <span style="color: #2544bb;">"Moving selected files to %s"</span> output)
   <span style="color: #505050;">;; </span><span style="color: #505050;">we need to convert TRAMP ssh syntax (e.g. /ssh:myserver:/home)</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">to rsync syntax (e.g. myserver:/home). For the output file</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">it's easy, but for input files we need to do it in the command,</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">that is where '</span><span style="color: #0000c0;">&lt;&lt;*&gt;&gt;</span><span style="color: #505050;">' is expanded.</span>
   (<span style="color: #5317ac;">let</span> ((clean-output (replace-regexp-in-string <span style="color: #2544bb;">"</span><span style="color: #702f00;">\</span><span style="color: #2544bb;">/ssh:"</span> <span style="color: #2544bb;">""</span> output))
         (clean-files-cmd <span style="color: #2544bb;">"echo &lt;&lt;*&gt;&gt; | sed '</span><span style="color: #0000c0;">s/\\/ssh://g</span><span style="color: #2544bb;">'"</span>))
     (format <span style="color: #2544bb;">"%s | xargs -i rsync -aP {} %s"</span> clean-files-cmd clean-output))
   <span style="color: #8f0075;">:utils</span> <span style="color: #2544bb;">"rsync"</span>))
</pre>
</div>

<p>
It could have been a one-liner but I had to add some additional logic
to transform <code>TRAMP</code> paths into valid <code>rsync</code> ones.
</p>

<p>
Now, I just need to select some files in <code>dired</code> and run
<code>mono/dwim-rsync</code>. This will let me specify in the minibuffer any path I
want (local or remote, using <code>ssh</code>), and <code>rsync</code> will be used to copy the
files. Bye, <code>filezilla</code>!
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</guid>
  <pubDate>Sun, 29 Jan 2023 19:27:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[my public dotfiles]]></title>
  <description><![CDATA[
<p>
<b>tldr</b> My dotfiles are now public <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a> ðŸŽ‰
</p>

<p>
Publishing one's <b>dotfiles</b> can feel like posting naked pictures. It may
show things that people wouldn't like to see. But I was finally brave
to do it (publishing dotfiles). I think it's fair to publish them, as
I have read many public dotfile repositories before writing mine. You
can find my dotfiles <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a>.
</p>


<div id="outline-container-org3b6954e" class="outline-2">
<h2 id="org3b6954e">GNU stow</h2>
<div class="outline-text-2" id="text-org3b6954e">
<p>
To keep a repository with all the dotfiles I am using <code>GNU Stow</code>. On its
<a href="https://www.gnu.org/software/stow/">website</a>, <code>GNU Stow</code> is defined as a <b>symlink farm manager</b>. It helps me to
manage automatically symlinks between <code>$HOME</code> (or any other place that
can contain dotfiles) and my dotfiles repository. I included a
<a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/makefile">makefile</a> in the repository to automatically create all the needed
links using this tool.
</p>
</div>
</div>

<div id="outline-container-orgaa8714b" class="outline-2">
<h2 id="orgaa8714b">emacs config</h2>
<div class="outline-text-2" id="text-orgaa8714b">
<p>
The biggest part of my dotfiles repository is my <code>Emacs</code> configuration
in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/emacs/.emacs.d">emacs/.emacs.d</a>. I have a modularized <code>Emacs</code> configuration, keeping
<code>.el</code> files for things like agenda, theming, keybindings, etc. I try to
add explanations for everything I add there, so I hope they can be
useful to you.
</p>
</div>
</div>

<div id="outline-container-org27ed7bd" class="outline-2">
<h2 id="org27ed7bd">secrets</h2>
<div class="outline-text-2" id="text-org27ed7bd">
<p>
There are always private things in your dotfiles that you don't want
to show.
</p>

<p>
For instance, in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/ssh/.ssh">ssh configuration</a>, there are some entries that I want
to keep secret. The solution was easy, I just need to add a new
<code>config.secret</code> file with those entries. That file will be included in
my <code>.gitignore</code> file and, to ensure I can access those entries, I added
the following to my main <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/ssh/.ssh/config">config file</a>:
</p>

<div class="org-src-container">
<pre class="src src-bash">Include config.secret
</pre>
</div>

<p>
All your secret entries will be automatically imported!
</p>

<p>
I also keep some <i>gitignored</i> <code>*.secrets.sh*</code> files that include <b>APIs keys</b>
and similar things.
</p>
</div>
</div>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-linux.html">linux</a> <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</link>
  <guid>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</guid>
  <pubDate>Mon, 26 Dec 2022 20:20:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[towards minimalism]]></title>
  <description><![CDATA[
<p>
<b>tldr</b> I moved the blog to an extremely simple static blog generator
with no dependencies, no <code>Javascript</code> and no magic tricks. Just plain
<code>HTML</code> and <code>CSS</code>.
</p>

<p>
If you have been following this blog for some time you will have
noticed that I am not very good at keeping a routine of writing new
blog posts every week (or even every month). There was something that
created a lot of friction in the writing process (even more than the
white paper syndrome): every time I wanted to add new content, usually
after some months with no content, the blog build process was
broken. I spent more time fixing the blog than adding content to
it. This made me move to lightweight blogging systems like <a href="https://jekyllrb.com/">Jekyll</a>. But
it wasn't enough so I decided to embrace minimalism.
</p>

<p>
What is the very minimal list of features that I need in a blogging
framework?:
</p>

<ul class="org-ul">
<li>Convert from markup languages such as <code>markdown</code> or <code>org-mode</code> into
plain <code>html</code></li>
<li>Keep an updated <b>index</b> page</li>
<li>Automatically create a <code>rss.xml</code> file</li>
<li>Automatically create an <b>archive</b> page and, ideally, another page for
each <b>tag</b></li>
</ul>

<p>
Just that. Those are the only things that I need. And that is what
<a href="https://github.com/bastibe/org-static-blog">org-static-blog</a> gives me. One single dependency, integrated into
<code>Emacs</code>, my OS (well&#x2026; my code editor). No <code>Javascript</code>, just pure <code>HTML</code>
and <code>CSS</code>.
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-blogging.html">blogging</a> </div>]]></description>
  <category><![CDATA[blogging]]></category>
  <link>https://unmonoqueteclea.github.io/2022-12-26-towards-minimalism.html</link>
  <guid>https://unmonoqueteclea.github.io/2022-12-26-towards-minimalism.html</guid>
  <pubDate>Mon, 26 Dec 2022 12:00:00 +0100</pubDate>
</item>
</channel>
</rss>
