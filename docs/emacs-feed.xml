<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[@unmonoqueteclea - emacs]]></title>
<description><![CDATA[@unmonoqueteclea - emacs]]></description>
<link>https://unmonoqueteclea.github.io/tag-emacs.html</link>
<lastBuildDate>Tue, 19 Mar 2024 18:30:53 +0100</lastBuildDate>
<item>
  <title><![CDATA[emacs: triggering rsync from dired]]></title>
  <description><![CDATA[
<p>
If you are a heavy <code>Emacs</code> user as me, you will have tried to move files
between different machines using <code>TRAMP</code>. But this approach is not nice
for large files. <code>TRAMP</code> is very slow for large files and it will block
<code>Emacs</code> during the file transfer.
</p>

<p>
Although <a href="https://github.com/stsquad/dired-rsync">dired-rsync</a> could help with that, I decided to write my own
solution, as this is a great usecase for the <a href="https://github.com/xenodium/dwim-shell-command">dwim-shell-command</a>
package I am testing these days.
</p>

<p>
And it turned out that the solution was as easy as this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #5317ac;">defun</span> <span style="color: #721045;">mono/dwim-rsync</span> (output)
  <span style="color: #2a486a;">"Use rsync to move selected files to OUTPUT."</span>
  (<span style="color: #5317ac;">interactive</span> <span style="color: #2544bb;">"D"</span>)
  (dwim-shell-command-on-marked-files
   (format <span style="color: #2544bb;">"Moving selected files to %s"</span> output)
   <span style="color: #505050;">;; </span><span style="color: #505050;">we need to convert TRAMP ssh syntax (e.g. /ssh:myserver:/home)</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">to rsync syntax (e.g. myserver:/home). For the output file</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">it's easy, but for input files we need to do it in the command,</span>
   <span style="color: #505050;">;; </span><span style="color: #505050;">that is where '</span><span style="color: #0000c0;">&lt;&lt;*&gt;&gt;</span><span style="color: #505050;">' is expanded.</span>
   (<span style="color: #5317ac;">let</span> ((clean-output (replace-regexp-in-string <span style="color: #2544bb;">"</span><span style="color: #813e00;">\</span><span style="color: #2544bb;">/ssh:"</span> <span style="color: #2544bb;">""</span> output))
         (clean-files-cmd <span style="color: #2544bb;">"echo &lt;&lt;*&gt;&gt; | sed '</span><span style="color: #0000c0;">s/\\/ssh://g</span><span style="color: #2544bb;">'"</span>))
     (format <span style="color: #2544bb;">"%s | xargs -i rsync -aP {} %s"</span> clean-files-cmd clean-output))
   <span style="color: #8f0075;">:utils</span> <span style="color: #2544bb;">"rsync"</span>))
</pre>
</div>

<p>
It could have been a one-liner but I had to add some additional logic
to transform <code>TRAMP</code> paths into valid <code>rsync</code> ones.
</p>

<p>
Now, I just need to select some files in <code>dired</code> and run
<code>mono/dwim-rsync</code>. This will let me specify in the minibuffer any path I
want (local or remote, using <code>ssh</code>), and <code>rsync</code> will be used to copy the
files. Bye, <code>filezilla</code>!
</p>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</link>
  <guid>https://unmonoqueteclea.github.io/2023-01-29-triggering-rsync-from-dired.html</guid>
  <pubDate>Sun, 29 Jan 2023 19:27:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[my public dotfiles]]></title>
  <description><![CDATA[
<p>
<b>tldr</b> My dotfiles are now public <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a> ðŸŽ‰
</p>

<p>
Publishing one's <b>dotfiles</b> can feel like posting naked pictures. It may
show things that people wouldn't like to see. But I was finally brave
to do it (publishing dotfiles). I think it's fair to publish them, as
I have read many public dotfile repositories before writing mine. You
can find my dotfiles <a href="https://gitlab.com/unmonoqueteclea/dotfiles">on Gitlab</a>.
</p>
<div id="outline-container-orgc2b231d" class="outline-2">
<h2 id="orgc2b231d">GNU stow</h2>
<div class="outline-text-2" id="text-orgc2b231d">
<p>
To keep a repository with all the dotfiles I am using <code>GNU Stow</code>. On its
<a href="https://www.gnu.org/software/stow/">website</a>, <code>GNU Stow</code> is defined as a <b>symlink farm manager</b>. It helps me to
manage automatically symlinks between <code>$HOME</code> (or any other place that
can contain dotfiles) and my dotfiles repository. I included a
<a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/makefile">makefile</a> in the repository to automatically create all the needed
links using this tool.
</p>
</div>
</div>
<div id="outline-container-org03b130b" class="outline-2">
<h2 id="org03b130b">emacs config</h2>
<div class="outline-text-2" id="text-org03b130b">
<p>
The biggest part of my dotfiles repository is my <code>Emacs</code> configuration
in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/emacs/.emacs.d">emacs/.emacs.d</a>. I have a modularized <code>Emacs</code> configuration, keeping
<code>.el</code> files for things like agenda, theming, keybindings, etc. I try to
add explanations for everything I add there, so I hope they can be
useful to you.
</p>
</div>
</div>
<div id="outline-container-org41c1741" class="outline-2">
<h2 id="org41c1741">secrets</h2>
<div class="outline-text-2" id="text-org41c1741">
<p>
There are always private things in your dotfiles that you don't want
to show.
</p>

<p>
For instance, in <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/tree/main/ssh/.ssh">ssh configuration</a>, there are some entries that I want
to keep secret. The solution was easy, I just need to add a new
<code>config.secret</code> file with those entries. That file will be included in
my <code>.gitignore</code> file and, to ensure I can access those entries, I added
the following to my main <a href="https://gitlab.com/unmonoqueteclea/dotfiles/-/blob/main/ssh/.ssh/config">config file</a>:
</p>

<div class="org-src-container">
<pre class="src src-bash">Include config.secret
</pre>
</div>

<p>
All your secret entries will be automatically imported!
</p>

<p>
I also keep some <i>gitignored</i> <code>*.secrets.sh*</code> files that include <b>APIs keys</b>
and similar things.
</p>
</div>
</div>
<div class="taglist"><a href="https://unmonoqueteclea.github.io/tags.html">Tags</a>: <a href="https://unmonoqueteclea.github.io/tag-linux.html">linux</a> <a href="https://unmonoqueteclea.github.io/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</link>
  <guid>https://unmonoqueteclea.github.io/2022-12-26-my-public-dotfiles.html</guid>
  <pubDate>Mon, 26 Dec 2022 20:20:00 +0100</pubDate>
</item>
</channel>
</rss>
